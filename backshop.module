<?php

/**
 * @file
 * Defines the Backshop Store entity and common library functions.
 */

define('BACKSHOP_ENTITY_ACTIVE', 1);
define('BACKSHOP_ENTITY_DISABLED', 0);

/**
 * Implements hook_menu().
 */
function backshop_menu() {
  $items = array();

  $items['admin/backshop'] = array(
    'title' => 'Backshop',
    'description' => 'Manage your Backshop eCommerce data and configuration.',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access backshop administration pages'),
    'file path' => drupal_get_path('module', 'system'),
    'file' => 'system.admin.inc',
    'weight' => -7,
  );

  $items['admin/backshop/config'] = array(
    'title' => 'Configuration',
    'description' => 'Manage your Backshop configuration.',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access backshop administration pages'),
    'file path' => drupal_get_path('module', 'system'),
    'file' => 'system.admin.inc',
    'weight' => -7,
  );

  $items['admin/backshop/config/store'] = array(
    'title' => 'Store settings',
    'description' => 'Manage your store information and other settings.',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('backshop_store_settings_form'),
    'access arguments' => array('configure backshop store'),
    'file' => 'backshop.admin.inc',
  );

  $items['admin/backshop/config/store/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/backshop/config/store/add'] = array(
    'title' => 'Add store',
    'description' => 'Create a new store object to manage multiple store contexts.',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('backshop_store_form'),
    'access arguments' => array('configure backshop store'),
    'type' => MENU_LOCAL_ACTION,
    'context' => MENU_CONTEXT_PAGE,
    'file' => 'backshop.pages.inc',
  );

  $items['admin/backshop/config/store/%backshop_store/make-default'] = array(
    'title' => 'Are you sure you want to change the default store?',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('backshop_store_make_default_form', 4),
    'access arguments' => array('configure backshop store'),
    'file' => 'backshop.admin.inc',
  );

  $items['store/%backshop_store'] = array(
    'title callback' => 'entity_label',
    'title arguments' => array('backshop_store', 1),
    'page callback' => 'backshop_store_view',
    'page arguments' => array(1),
    'access arguments' => array('configure backshop store'),
    'file' => 'backshop.pages.inc',
  );
  $items['store/%backshop_store/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );
  $items['store/%backshop_store/edit'] = array(
    'title' => 'Edit',
    'description' => 'Edit a store.',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('backshop_store_form', 1),
    'access arguments' => array('configure backshop store'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
    'file' => 'backshop.pages.inc',
  );
  $items['store/%backshop_store/delete'] = array(
    'title' => 'Delete',
    'description' => 'Delete a store.',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('backshop_store_delete_form', 1),
    'access arguments' => array('configure backshop store'),
    'type' => MENU_LOCAL_ACTION,
    'context' => MENU_CONTEXT_INLINE,
    'weight' => 20,
    'file' => 'backshop.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_admin_bar_output_alter().
 */
function backshop_admin_bar_output_alter(&$content) {
  // Disable our default local task menu item from appearing in the admin bar.
  $content['menu']['menu']['admin/backshop']['admin/backshop/config']['admin/backshop/config/store']['admin/backshop/config/store/settings']['#access'] = FALSE;
}

/**
 * Implements hook_permission().
 */
function backshop_permission() {
  $permissions = array(
    'access backshop administration pages' => array(
      'title' => t('Access Backshop administration pages'),
      'description' => t('Allows users to access various Backshop administration pages.'),
      'restrict access' => TRUE,
    ),
    'configure backshop store' => array(
      'title' => t('Configure Backshop store'),
      'restrict access' => TRUE,
    ),
  );

  // Add the entity access permissions for the store entity type.
  $permissions += backshop_entity_access_permissions('backshop_store');

  return $permissions;
}

/**
 * Return permissions for a given entity type.
 */
function backshop_entity_access_permissions($entity_type) {
  $entity_info = entity_get_info($entity_type);
  $labels = $entity_info['permission labels'];

  $permissions = array();

  // General 'administer' permission.
  $permissions['administer ' . $entity_type . ' entities'] = array(
    'title' => t('Administer @entity_type', array('@entity_type' => $labels['plural'])),
    'description' => t('Allows users to perform any action on @entity_type.', array('@entity_type' => $labels['plural'])),
    'restrict access' => TRUE,
  );

  // Generic create and edit permissions.
  $permissions['create ' . $entity_type . ' entities'] = array(
    'title' => t('Create @entity_type of any type', array('@entity_type' => $labels['plural'])),
  );
  if (!empty($entity_info['access arguments']['user key'])) {
    $permissions['edit own ' . $entity_type . ' entities'] = array(
      'title' => t('Edit own @entity_type of any type', array('@entity_type' => $labels['plural'])),
    );
    $permissions['delete own ' . $entity_type . ' entities'] = array(
      'title' => t('Delete own @entity_type of any type', array('@entity_type' => $labels['plural'])),
    );
  }
  $permissions['edit any ' . $entity_type . ' entity'] = array(
    'title' => t('Edit any @entity_type of any type', array('@entity_type' => $labels['singular'])),
    'restrict access' => TRUE,
  );
  $permissions['delete any ' . $entity_type . ' entity'] = array(
    'title' => t('Delete any @entity_type of any type', array('@entity_type' => $labels['singular'])),
    'restrict access' => TRUE,
  );
  if (!empty($entity_info['access arguments']['user key'])) {
    $permissions['view own ' . $entity_type . ' entities'] = array(
      'title' => t('View own @entity_type of any type', array('@entity_type' => $labels['plural'])),
    );
  }
  $permissions['view any ' . $entity_type . ' entity'] = array(
    'title' => t('View any @entity_type of any type', array('@entity_type' => $labels['singular'])),
    'restrict access' => TRUE,
  );
  if (!empty($entity_info['entity keys']['status'])) {
    $permissions['view active ' . $entity_type . ' entities'] = array(
      'title' => t('View active @entity_type of any type', array('@entity_type' => $labels['plural'])),
    );
  }

  // Per-bundle create and edit permissions.
  if (!empty($entity_info['entity keys']['bundle'])) {
    foreach ($entity_info['bundles'] as $bundle_name => $bundle_info) {
      $permissions['create ' . $entity_type . ' entities of bundle ' . $bundle_name] = array(
        'title' => t('Create %bundle @entity_type', array('@entity_type' => $labels['plural'], '%bundle' => $bundle_info['label'])),
      );
      if (!empty($entity_info['access arguments']['user key'])) {
        $permissions['edit own ' . $entity_type . ' entities of bundle ' . $bundle_name] = array(
          'title' => t('Edit own %bundle @entity_type', array('@entity_type' => $labels['plural'], '%bundle' => $bundle_info['label'])),
        );
        $permissions['delete own ' . $entity_type . ' entities of bundle ' . $bundle_name] = array(
          'title' => t('Delete own %bundle @entity_type', array('@entity_type' => $labels['plural'], '%bundle' => $bundle_info['label'])),
        );
      }
      $permissions['edit any ' . $entity_type . ' entity of bundle ' . $bundle_name] = array(
        'title' => t('Edit any %bundle @entity_type', array('@entity_type' => $labels['singular'], '%bundle' => $bundle_info['label'])),
        'restrict access' => TRUE,
      );
      $permissions['delete any ' . $entity_type . ' entity of bundle ' . $bundle_name] = array(
        'title' => t('Delete any %bundle @entity_type', array('@entity_type' => $labels['singular'], '%bundle' => $bundle_info['label'])),
        'restrict access' => TRUE,
      );
      if (!empty($entity_info['access arguments']['user key'])) {
        $permissions['view own ' . $entity_type . ' entities of bundle ' . $bundle_name] = array(
          'title' => t('View own %bundle @entity_type', array('@entity_type' => $labels['plural'], '%bundle' => $bundle_info['label'])),
        );
      }
      $permissions['view any ' . $entity_type . ' entity of bundle ' . $bundle_name] = array(
        'title' => t('View any %bundle @entity_type', array('@entity_type' => $labels['singular'], '%bundle' => $bundle_info['label'])),
        'restrict access' => TRUE,
      );
      if (!empty($entity_info['entity keys']['status'])) {
        $permissions['view active ' . $entity_type . ' entities of bundle ' . $bundle_name] = array(
          'title' => t('View active %bundle @entity_type', array('@entity_type' => $labels['plural'], '%bundle' => $bundle_info['label'])),
          'restrict access' => TRUE,
        );
      }
    }
  }

  return $permissions;
}

/**
 * Implements hook_autoload_info().
 */
function backshop_autoload_info() {
  return array(
    'BackshopStore' => 'includes/backshop.entity.inc',
    'BackshopVersionedEntityStorageController' => 'includes/backshop.entity.inc',

    // Views handlers
    'views_handler_argument_backshop_store_id' => 'views/views_handler_argument_backshop_store_id.inc',
    'views_handler_argument_backshop_store_revision_id' => 'views/views_handler_argument_backshop_store_revision_id.inc',
    'views_handler_argument_backshop_store_type' => 'views/views_handler_argument_backshop_store_type.inc',
    'views_handler_field_backshop_store' => 'views/views_handler_field_backshop_store.inc',
    'views_handler_field_backshop_store_is_default' => 'views/views_handler_field_backshop_store_is_default.inc',
    'views_handler_field_backshop_store_link' => 'views/views_handler_field_backshop_store_link.inc',
    'views_handler_field_backshop_store_link_delete' => 'views/views_handler_field_backshop_store_link_delete.inc',
    'views_handler_field_backshop_store_link_edit' => 'views/views_handler_field_backshop_store_link_edit.inc',
    'views_handler_field_backshop_store_type' => 'views/views_handler_field_backshop_store_type.inc',
    'views_handler_filter_backshop_store_type' => 'views/views_handler_filter_backshop_store_type.inc',
  );
}

/**
 * Implements hook_views_api().
 */
function backshop_views_api() {
  return array(
    'api' => '3.0',
    'path' => backdrop_get_path('module', 'backshop') . '/views',
  );
}

/**
 * Implements hook_config_info().
 */
function backshop_config_info() {
  return array(
    'backshop.settings' => array(
      'label' => t('Backshop settings'),
      'group' => t('Backshop'),
    ),
  );
}

/**
 * Implements hook_entity_info().
 */
function backshop_entity_info() {
  $info = array();

  $info['backshop_store'] = array(
    'label' => t('Store'),
    'bundle label' => t('Type'),
    'controller class' => 'BackshopVersionedEntityStorageController',
    'entity class' => 'BackshopStore',
    'base table' => 'backshop_store',
    'revision table' => 'backshop_store_revision',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'store_id' ,
      'revision' => 'revision_id',
      'bundle' => 'type',

      // The status key is used to create and check permissions to view active
      // entities of a given type and bundle.
      'status' => 'status',

      // The changed key is used to determine the last changed timestamp of the
      // entity, e.g. to ensure an entity has not changed while it was being
      // edited on an active form.
      'changed' => 'changed',
    ),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'static cache' => TRUE,
    'access callback' => 'backshop_entity_access',
    'access arguments' => array(
      'user key' => 'uid',
      'access tag' => 'backshop_store_access',
    ),
    'permission labels' => array(
      'singular' => t('store'),
      'plural' => t('stores'),
    ),

    'bundles' => array(
      'online' => array(
        'label' => t('Online store'),
        'admin' => array(
          'path' => 'admin/backshop/config/store',
          'access arguments' => array('configure backshop store'),
        ),
      ),
    ),

    'view modes' => array(
      'full' => array(
        'label' => t('Full display'),
        'custom settings' => FALSE,
      ),
      'summary' => array(
        'label' => t('Summary display'),
        'custom settings' => TRUE,
      )
    ),
  );

  return $info;
}

/**
 * @todo Implement hook_path_info() once tokens exist for Backshop entities.
 */

/**
 * Loads a single store.
 *
 * @param int $store_id
 *   The ID of the store to load.
 *
 * @return BackshopStore|bool
 *   The fully loaded store or FALSE if not found.
 */
function backshop_store_load($store_id) {
  return entity_load('backshop_store', $store_id);
}

/**
 * Generic access control for Backshop entities.
 *
 * @param string $op
 *   The operation being performed. One of 'view', 'update', 'create' or
 *   'delete'.
 * @param EntityInterface $entity
 *   An entity to check access for, either an entity from the database or a stub
 *   entity with the type and bundle set for those general access checks.
 * @param stdClass|null $account
 *   The user to check for; leave NULL to check access for the global user.
 *
 * @return bool
 *   Boolean indicating whether or not the specified account has access to
 *   perform the operation.
 */
function backshop_entity_access($op, $entity, $account = NULL) {
  global $user;
  $account = isset($account) ? $account : $user;

  // Derive the entity type and bundle from the entity object.
  $entity_type = $entity->entityType();
  $bundle_name = $entity->bundle();

  $entity_info = entity_get_info($entity->entityType());

  if ($op == 'view') {
    if (!$entity->isNew()) {
      // When trying to figure out access to an entity loaded from the database,
      // query the base table using our access control tag.
      if (!empty($entity_info['access arguments']['access tag']) && module_implements('query_' . $entity_info['access arguments']['access tag'] . '_alter')) {
        $query = db_select($entity_info['base table']);
        $query->addExpression('1');
        return (bool) $query
          ->addTag($entity_info['access arguments']['access tag'])
          ->addMetaData('account', $account)
          ->condition($entity_info['entity keys']['id'], $entity->id())
          ->range(0, 1)
          ->execute()
          ->fetchField();
      }
      else {
        return TRUE;
      }
    }
    else {
      return user_access('view any ' . $entity_type . ' entity', $account);
    }
  }
  else {
    // First grant access to the entity for the specified operation if no other
    // module denies it and at least one other module says to grant access.
    $access_results = module_invoke_all('backshop_entity_access', $op, $entity, $account);

    if (in_array(FALSE, $access_results, TRUE)) {
      return FALSE;
    }
    elseif (in_array(TRUE, $access_results, TRUE)) {
      return TRUE;
    }

    // Grant generic administrator level access.
    if (user_access('administer ' . $entity_type . ' entities', $account)) {
      return TRUE;
    }

    // Grant access based on entity type and bundle specific permissions with
    // special handling for the create operation since the entity passed in will
    // be initialized without ownership.
    // @todo Split entity type and bundle access checks out of this function.
    if ($op == 'create') {
      // Assuming an entity was passed in and we know its bundle key, perform
      // the entity type and bundle-level access checks.
      if (isset($entity) && !empty($entity_info['entity keys']['bundle'])) {
        return user_access('create ' . $entity_type . ' entities', $account) || user_access('create ' . $entity_type . ' entities of bundle ' . $entity->{$entity_info['entity keys']['bundle']}, $account);
      }
      else {
        // Otherwise perform an entity type-level access check.
        return user_access('create ' . $entity_type . ' entities', $account);
      }
    }
    elseif ($op == 'edit' || $op == 'delete') {
      // For the edit and delete operations, first perform the entity type and
      // bundle-level access check for any entity.
      if (user_access($op . ' any ' . $entity_type . ' entity', $account) ||
        user_access($op . ' any ' . $entity_type . ' entity of bundle ' . $bundle_name, $account)) {
        return TRUE;
      }

      // Then check an authenticated user's access to edit his own entities.
      if ($account->uid && !empty($entity_info['access arguments']['user key']) && isset($entity->{$entity_info['access arguments']['user key']}) && $entity->{$entity_info['access arguments']['user key']} == $account->uid) {
        if (user_access($op . ' own ' . $entity_type . ' entities', $account) ||
          user_access($op . ' own ' . $entity_type . ' entities of bundle ' . $bundle_name, $account)) {
          return TRUE;
        }
      }
    }
  }

  return FALSE;
}

/**
 * Generic implementation of hook_query_alter() for Backshop entities.
 *
 * @param SelectQuery $query
 *   The select query object being used to determine view access for an entity.
 * @param string $entity_type
 *   The type of the entity whose view access is being checked.
 * @param string $base_table
 *   The base table of the entity type if known.
 * @param stdClass|null $account
 *   The user account to check access for; if NULL, defaults to the current
 *   global user object.
 */
function backshop_entity_access_query_alter($query, $entity_type, $base_table = NULL, $account = NULL) {
  global $user;

  // Read the account from the query if available or default to the current user.
  if (!isset($account) && !$account = $query->getMetaData('account')) {
    $account = $user;
  }

  // Do not apply any conditions for users with administrative view permissions.
  if (user_access('administer ' . $entity_type . ' entities', $account)
    || user_access('view any ' . $entity_type . ' entity', $account)) {
    return;
  }

  // Get the entity type info array for the current access check and prepare a
  // conditions object.
  $entity_info = entity_get_info($entity_type);

  // If a base table wasn't specified, attempt to read it from the query if
  // available, look for a table in the query's tables array that matches the
  // base table of the given entity type, or just default to the first table.
  if (!isset($base_table) && !$base_table = $query->getMetaData('base_table')) {
    // Initialize the base table to the first table in the array. If a table can
    // not be found that matches the entity type's base table, this will result
    // in an invalid query if the first table is not the table we expect,
    // forcing the caller to actually properly pass a base table in that case.
    $tables = $query->getTables();
    reset($tables);
    $base_table = key($tables);

    foreach ($tables as $table_info) {
      if (!($table_info instanceof SelectQueryInterface)) {
        // If this table matches the entity type's base table, use its table
        // alias as the base table for the purposes of bundle and ownership
        // access checks.
        if ($table_info['table'] == $entity_info['base table']) {
          $base_table = $table_info['alias'];
        }
      }
    }
  }

  // Prepare an OR container for conditions. Conditions will be added that seek
  // to grant access, meaning any particular type of permission check may grant
  // access even if none of the others apply. At the end of this function, if no
  // conditions have been added to the array, a condition will be added that
  // always returns FALSE (1 = 0).
  $conditions = db_or();

  // If the user has access to view active entities of the given entity type,
  // add a condition group granting access to view those entities.
  if (!empty($entity_info['entity keys']['status']) && user_access('view active ' . $entity_type . ' entities', $account)) {
    $conditions->condition($base_table . '.' . $entity_info['entity keys']['status'], 1);
  }

  // Perform bundle specific permission checks for the specified entity type.
  // In the event that the user has permission to view every bundle of the given
  // entity type, $really_restricted will remain FALSE, indicating that it is
  // safe to exit this function without applying any additional conditions. If
  // the user only had such permission for a subset of the defined bundles,
  // conditions representing those access checks would still be added.
  $really_restricted = FALSE;

  // Loop over every possible bundle for the given entity type.
  foreach ($entity_info['bundles'] as $bundle_name => $bundle_info) {
    // If the user has access to view entities of the current bundle...
    if (user_access('view any ' . $entity_type . ' entity of bundle ' . $bundle_name, $account)) {
      // Add a condition granting access if the entity specified by the view
      // query is of the same bundle.
      $conditions->condition($base_table . '.' . $entity_info['entity keys']['bundle'], $bundle_name);
    }
    elseif (!empty($entity_info['entity keys']['status']) && user_access('view active ' . $entity_type . ' entities of bundle ' . $bundle_name, $account)) {
      // Otherwise if the user has access to view active entities of the current
      // bundle and given entity type, add an AND condition group that grants
      // access to view those entities.
      $conditions->condition(db_and()
        ->condition($base_table . '.' . $entity_info['entity keys']['bundle'], $bundle_name)
        ->condition($base_table . '.' . $entity_info['entity keys']['status'], 1)
      );
    }
    elseif ($account->uid && !empty($entity_info['access arguments']['user key']) && user_access('view own ' . $entity_type . ' entities of bundle ' . $bundle_name, $account)) {
      // Otherwise if an authenticated user has access to view his own entities
      // of the current bundle and the given entity type has a user ownership key...
      $really_restricted = TRUE;

      // Add an AND condition group that grants access if the entity specified
      // by the view query matches the same bundle and belongs to the user.
      $conditions->condition(db_and()
        ->condition($base_table . '.' . $entity_info['entity keys']['bundle'], $bundle_name)
        ->condition($base_table . '.' . $entity_info['access arguments']['user key'], $account->uid)
      );
    }
    else {
      $really_restricted = TRUE;
    }
  }

  // No further conditions need to be added to the query if we determined above
  // that the user has an administrative view permission for any entity of the
  // type and bundles represented by the query.
  if (!$really_restricted) {
    return;
  }

  // If the given entity type has a user ownership key...
  if (!empty($entity_info['access arguments']['user key'])) {
    // Perform 'view own' access control for the entity in the query if the user
    // is authenticated.
    if ($account->uid && user_access('view own ' . $entity_type . ' entities', $account)) {
      $conditions->condition($base_table . '.' . $entity_info['access arguments']['user key'], $account->uid);
    }
  }

  // Prepare an array of condition alter hooks to invoke and an array of context
  // data for the current query.
  $hooks = array(
    'backshop_entity_access_condition_' . $entity_type,
    'backshop_entity_access_condition'
  );

  $context = array(
    'account' => $account,
    'entity_type' => $entity_type,
    'base_table' => $base_table
  );

  // Allow other modules to add conditions to the array as necessary.
  backdrop_alter($hooks, $conditions, $context);

  // If we have more than one condition based on the entity access permissions
  // and any hook implementations...
  if (count($conditions)) {
    // Add the conditions to the query.
    $query->condition($conditions);
  }
  else {
    // Otherwise, since we don't have any possible conditions to match against,
    // we falsify this query. View checks are access grants, not access denials.
    $query->where('1 = 0');
  }
}

/**
 * Implements hook_query_TAG_alter().
 */
function backshop_query_backshop_store_access_alter(QueryAlterableInterface $query) {
  backshop_entity_access_query_alter($query, 'backshop_store');
}

/**
 * Generates an array for rendering a single store.
 *
 * @param BackshopStore $store
 *   The store object being viewed.
 * @param string $view_mode
 *   The view mode to render the store for.
 * @param string $langcode
 *   The language code to use when preparing the store for display.
 *
 * @return array
 *   A render array for the store.
 */
function backshop_store_view(BackshopStore $store, $view_mode = 'full', $langcode = NULL) {
  return entity_get_controller('backshop_store')->view(array($store), $view_mode, $langcode);
}

/**
 * Returns the label for a specific entity type's bundle.
 *
 * @param string $entity_type
 *   The machine-name of the entity type.
 * @param string $bundle
 *   The machine-name of the bundle.
 *
 * @return string
 *   The label of the specified entity type's bundle.
 */
function backshop_entity_bundle_label($entity_type, $bundle) {
  $entity_info = entity_get_info($entity_type);

  if (!empty($entity_info['bundles'][$bundle]['label'])) {
    return check_plain($entity_info['bundles'][$bundle]['label']);
  }

  return t('Unknown');
}

/**
 * Returns an unsanitized options list for an entity type's bundles.
 *
 * @param string $entity_type
 *   The machine name of the entity type to generate an options list for.
 *
 * @return array
 *   An array of the entity type's bundle labels keyed by machine name.
 */
function backshop_entity_bundle_options($entity_type) {
  $entity_info = entity_get_info($entity_type);
  $options = array();

  if (!empty($entity_info['bundles']) && is_array($entity_info['bundles'])) {
    foreach ($entity_info['bundles'] as $bundle => $bundle_info) {
      $options[$bundle] = $bundle_info['label'];
    }
  }

  return $options;
}

/**
 * Finds the last time an entity was changed.
 *
 * @todo Move this code to the entity controller since it's storage dependent.
 *
 * @param $entity_type
 *   The type of the entity to check.
 * @param $entity_id
 *   The ID of the entity to check.
 *
 * @return int|bool
 *   A Unix timestamp indicating the last time the entity was changed or FALSE
 *   if a generic query could not get the solution or the entity is not found.
 */
function backshop_entity_last_changed($entity_type, $entity_id) {
  $entity_info = entity_get_info($entity_type);

  if (!empty($entity_info['entity keys']['changed'])) {
    $changed_key = $entity_info['entity keys']['changed'];
    $base_table = $entity_info['base table'];
    $id_key = $entity_info['entity keys']['id'];

    return db_query('SELECT ' . $changed_key . ' FROM {' . $base_table . '} WHERE ' . $id_key . ' = :id', array(':id' => $entity_id))->fetch()->{$changed_key};
  }

  return FALSE;
}
