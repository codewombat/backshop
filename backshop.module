<?php

/**
 * @file
 * Defines the Backshop Store entity and common library functions.
 */

define('BACKSHOP_ENTITY_ACTIVE', 1);
define('BACKSHOP_ENTITY_DISABLED', 0);

/**
 * Implements hook_menu().
 */
function backshop_menu() {
  $items = array();

  $items['admin/backshop'] = array(
    'title' => 'Backshop',
    'description' => 'Manage your Backshop eCommerce data and configuration.',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access backshop administration pages'),
    'file path' => drupal_get_path('module', 'system'),
    'file' => 'system.admin.inc',
    'weight' => -7,
  );

  $items['admin/backshop/config'] = array(
    'title' => 'Configuration',
    'description' => 'Manage your Backshop configuration.',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access backshop administration pages'),
    'file path' => drupal_get_path('module', 'system'),
    'file' => 'system.admin.inc',
    'weight' => -7,
  );

  $items['admin/backshop/config/store'] = array(
    'title' => 'Store settings',
    'description' => 'Manage your store information and other settings.',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('backshop_store_settings_form'),
    'access arguments' => array('configure backshop store'),
    'file' => 'backshop.admin.inc',
  );

  $items['admin/backshop/config/store/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/backshop/config/store/add'] = array(
    'title' => 'Add store',
    'description' => 'Create a new store object to manage multiple store contexts.',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('backshop_store_form'),
    'access arguments' => array('configure backshop store'),
    'type' => MENU_LOCAL_ACTION,
    'context' => MENU_CONTEXT_PAGE,
    'file' => 'backshop.pages.inc',
  );

  $items['store/%backshop_store'] = array(
    'title callback' => 'entity_label',
    'title arguments' => array('backshop_store', 1),
    'page callback' => 'backshop_store_view',
    'page arguments' => array(1),
    'access arguments' => array('configure backshop store'),
    'file' => 'backshop.pages.inc',
  );
  $items['store/%backshop_store/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );
  $items['store/%backshop_store/edit'] = array(
    'title' => 'Edit',
    'description' => 'Edit a store.',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('backshop_store_form', 1),
    'access arguments' => array('configure backshop store'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
    'file' => 'backshop.pages.inc',
  );
  $items['store/%backshop_store/delete'] = array(
    'title' => 'Delete',
    'description' => 'Delete a store.',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('backshop_store_delete_form', 1),
    'access arguments' => array('configure backshop store'),
    'type' => MENU_LOCAL_ACTION,
    'context' => MENU_CONTEXT_INLINE,
    'weight' => 20,
    'file' => 'backshop.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_admin_bar_output_alter().
 */
function backshop_admin_bar_output_alter(&$content) {
  // Disable our default local task menu item from appearing in the admin bar.
  $content['menu']['menu']['admin/backshop']['admin/backshop/config']['admin/backshop/config/store']['admin/backshop/config/store/settings']['#access'] = FALSE;
}

/**
 * Implements hook_permission().
 */
function backshop_permission() {
  $permissions = array(
    'access backshop administration pages' => array(
      'title' => t('Access Backshop administration pages'),
      'description' => t('Allows users to access various Backshop administration pages.'),
      'restrict access' => TRUE,
    ),
    'configure backshop store' => array(
      'title' => t('Configure Backshop store'),
      'restrict access' => TRUE,
    ),
  );

  return $permissions;
}

/**
 * Implements hook_autoload_info().
 */
function backshop_autoload_info() {
  return array(
    'BackshopStore' => 'includes/backshop.entity.inc',
    'BackshopVersionedEntityStorageController' => 'includes/backshop.entity.inc',

    // Views handlers
    'views_handler_argument_backshop_store_id' => 'views/views_handler_argument_backshop_store_id.inc',
    'views_handler_argument_backshop_store_revision_id' => 'views/views_handler_argument_backshop_store_revision_id.inc',
    'views_handler_argument_backshop_store_type' => 'views/views_handler_argument_backshop_store_type.inc',
    'views_handler_field_backshop_store' => 'views/views_handler_field_backshop_store.inc',
    'views_handler_field_backshop_store_link' => 'views/views_handler_field_backshop_store_link.inc',
    'views_handler_field_backshop_store_link_delete' => 'views/views_handler_field_backshop_store_link_delete.inc',
    'views_handler_field_backshop_store_link_edit' => 'views/views_handler_field_backshop_store_link_edit.inc',
    'views_handler_field_backshop_store_type' => 'views/views_handler_field_backshop_store_type.inc',
    'views_handler_filter_backshop_store_type' => 'views/views_handler_filter_backshop_store_type.inc',
  );
}

/**
 * Implements hook_views_api().
 */
function backshop_views_api() {
  return array(
    'api' => '3.0',
    'path' => backdrop_get_path('module', 'backshop') . '/views',
  );
}

/**
 * Implements hook_config_info().
 */
function backshop_config_info() {
  return array(
    'backshop.settings' => array(
      'label' => t('Backshop settings'),
      'group' => t('Backshop'),
    ),
  );
}

/**
 * Implements hook_entity_info().
 */
function backshop_entity_info() {
  $info = array();

  $info['backshop_store'] = array(
    'label' => t('Store'),
    'bundle label' => t('Type'),
    'controller class' => 'BackshopVersionedEntityStorageController',
    'entity class' => 'BackshopStore',
    'base table' => 'backshop_store',
    'revision table' => 'backshop_store_revision',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'store_id' ,
      'revision' => 'revision_id',
      'bundle' => 'type',
      'changed' => 'changed',
    ),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'static cache' => TRUE,

    'bundles' => array(
      'online' => array(
        'label' => t('Online store'),
        'admin' => array(
          'path' => 'admin/backshop/config/store',
          'access arguments' => array('configure backshop store'),
        ),
      ),
    ),

    'view modes' => array(
      'full' => array(
        'label' => t('Full display'),
        'custom settings' => FALSE,
      ),
      'summary' => array(
        'label' => t('Summary display'),
        'custom settings' => TRUE,
      )
    ),
  );

  return $info;
}

/**
 * @todo Implement hook_path_info() once tokens exist for Backshop entities.
 */

/**
 * Loads a single store.
 *
 * @param int $store_id
 *   The ID of the store to load.
 *
 * @return BackshopStore|bool
 *   The fully loaded store or FALSE if not found.
 */
function backshop_store_load($store_id) {
  return entity_load('backshop_store', $store_id);
}

/**
 * Provides blanket access to stores.
 */
function backshop_store_access() {
  return TRUE;
}

/**
 * Generates an array for rendering a single store.
 *
 * @param BackshopStore $store
 *   The store object being viewed.
 * @param string $view_mode
 *   The view mode to render the store for.
 * @param string $langcode
 *   The language code to use when preparing the store for display.
 *
 * @return array
 *   A render array for the store.
 */
function backshop_store_view(BackshopStore $store, $view_mode = 'full', $langcode = NULL) {
  return entity_get_controller('backshop_store')->view(array($store), $view_mode, $langcode);
}

/**
 * Returns the label for a specific entity type's bundle.
 *
 * @param string $entity_type
 *   The machine-name of the entity type.
 * @param string $bundle
 *   The machine-name of the bundle.
 *
 * @return string
 *   The label of the specified entity type's bundle.
 */
function backshop_entity_bundle_label($entity_type, $bundle) {
  $entity_info = entity_get_info($entity_type);

  if (!empty($entity_info['bundles'][$bundle]['label'])) {
    return check_plain($entity_info['bundles'][$bundle]['label']);
  }

  return t('Unknown');
}

/**
 * Returns an unsanitized options list for an entity type's bundles.
 *
 * @param string $entity_type
 *   The machine name of the entity type to generate an options list for.
 *
 * @return array
 *   An array of the entity type's bundle labels keyed by machine name.
 */
function backshop_entity_bundle_options($entity_type) {
  $entity_info = entity_get_info($entity_type);
  $options = array();

  if (!empty($entity_info['bundles']) && is_array($entity_info['bundles'])) {
    foreach ($entity_info['bundles'] as $bundle => $bundle_info) {
      $options[$bundle] = $bundle_info['label'];
    }
  }

  return $options;
}

/**
 * Finds the last time an entity was changed.
 *
 * @todo Move this code to the entity controller since it's storage dependent.
 *
 * @param $entity_type
 *   The type of the entity to check.
 * @param $entity_id
 *   The ID of the entity to check.
 *
 * @return int|bool
 *   A Unix timestamp indicating the last time the entity was changed or FALSE
 *   if a generic query could not get the solution or the entity is not found.
 */
function backshop_entity_last_changed($entity_type, $entity_id) {
  $entity_info = entity_get_info($entity_type);

  if (!empty($entity_info['entity keys']['changed'])) {
    $changed_key = $entity_info['entity keys']['changed'];
    $base_table = $entity_info['base table'];
    $id_key = $entity_info['entity keys']['id'];

    return db_query('SELECT ' . $changed_key . ' FROM {' . $base_table . '} WHERE ' . $id_key . ' = :id', array(':id' => $entity_id))->fetch()->{$changed_key};
  }

  return FALSE;
}
